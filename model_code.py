# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

# Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier

from sklearn.metrics import  confusion_matrix , recall_score , precision_score , f1_score , accuracy_score , classification_report

from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler

from collections import Counter


from sklearn.model_selection import GridSearchCV

import pickle

plt.style.use('fivethirtyeight')

import warnings
warnings.filterwarnings('ignore')

"""# Read Data"""

data = pd.read_csv('/content/diabetes.csv')

"""# Explore Data"""

data.head(3)

data.info()

data.shape

data.isnull().sum()

data.describe()

data.duplicated().sum()

"""# Data Analysis"""

corr = data.corr()
corr

sns.heatmap(corr,annot=True,fmt='0.1f',linewidths=3)
plt.show()

sns.countplot(x='Outcome', data=data,palette=['green','red'])
plt.show()

plt.figure(figsize=(20,6))

plt.subplot(1,3,1)
plt.title('Counter Plot')
sns.countplot(x='Pregnancies',data=data)

plt.subplot(1,3,2)
plt.title('Distribution Plot')
sns.distplot(data['Pregnancies'])

plt.subplot(1,3,3)
plt.title('BoX Plot')
sns.boxplot(y=data['Pregnancies'])

plt.show()

sns.boxplot(data.Age)

"""# Create Model"""

X = data.drop('Outcome',axis=1)
 y = data['Outcome']

"""# To check balanced of data"""

max = data[data['Outcome'] == 0]
mini = data[data['Outcome'] == 1]
max.shape , mini.shape

rm = RandomOverSampler(random_state = 41)
x_res , y_res = rm.fit_resample(X,y)

print("Old DataSet Shape{}".format(Counter(y)))
print("New DataSet Shape{}".format(Counter(y_res)))

x_train ,x_test , y_train , y_test = train_test_split(x_res,y_res, test_size=.2 , random_state=41)

selected_Model = RandomForestClassifier(class_weight='balanced')
selected_parameters = {'n_estimators':(100,200,300),'max_depth':(7,10,15)}
GridSearch_Model = GridSearchCV(estimator=selected_Model,param_grid=selected_parameters,cv=5)
GridSearch_Model.fit(x_train,y_train)
sorted(GridSearch_Model.cv_results_.keys())
GridSearch_Results = pd.DataFrame(GridSearch_Model.cv_results_)[['mean_test_score','std_test_score','params','rank_test_score','mean_fit_time']]

print('All Results are : \n',GridSearch_Results)
print('*'*50)
print('Best Score is : \n',GridSearch_Model.best_score_)
print('*'*50)
print('Best Parameters are :\n',GridSearch_Model.best_params_)
print('*'*50)
print('Best Estimators are :\n',GridSearch_Model.best_estimator_)

model1 = LogisticRegression()
model2 = SVC()
model3 = RandomForestClassifier(n_estimators=300 , class_weight='balanced',max_depth=10)
model4 = GradientBoostingClassifier(n_estimators=10)

algorithms = ['LogisticRegression','SVC','RandomForestClassifier','GradientBoostingClassifier']
Accuracy = []
Recall = []
Precision = []
F1 = []

def evaluation(model):
  model.fit(x_train , y_train)
  pre = model.predict(x_test)
  accuracy = accuracy_score(y_test , pre)
  recall = recall_score(y_test , pre)
  precision = precision_score(y_test,pre)
  f1 = f1_score(y_test , pre)
  Accuracy.append(accuracy)
  Recall.append(recall)
  Precision.append(precision)
  F1.append(f1)
  #sns.heatmap(confusion_matrix(y_test,pre))
  #print(f"Classification Report for {model} is : {classification_report(y_test,pre)}")
  result = print(f"accuracy = {accuracy}\n'Recall' = {recall}\n'f1_score' = {f1}\n'precision_score' = {Precision}")
  return result

Results = []
models = [model1,model2,model3,model4]
for model in models:
  print(f"model : {model}")
  Results.append(evaluation(model))

df = pd.DataFrame({'Algorithms':algorithms,'Accuracy':Accuracy,'Recall':Recall,'f1_score':F1,'precision_score':Precision})
df

fig , ax = plt.subplots(figsize=(20,5))
plt.plot(df.Algorithms,Accuracy,label='Accuracies')
plt.plot(df.Algorithms,Recall,label='Recall')
plt.plot(df.Algorithms,F1,label='F1_Score')
plt.plot(df.Algorithms,Precision,label='precision_score')
plt.legend()
plt.show()

"""# Using my Model to predict new data"""

filename = 'Diabetes_Prediction.pkl'
pickle.dump(model3,open(filename,'wb'))

filename1 = 'Diabetes_Prediction.sav'
pickle.dump(model3,open(filename1,'wb'))

#loadmodel = pickle.load(open(filename,'rb'))